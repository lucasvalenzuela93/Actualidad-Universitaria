import Class_Villanos.*
import Class_Armas.*
import Class_Minion.*
import Class_Maldades.*
import Class_Ciudad.*
import Class_Congelar.*


describe "Test Villanos"{
		var rosario  = new Ciudad(30,[])
		var gru 	 = new Villano(rosario)	
		var congelar = new Congelar (gru)
		var steve 	 = new Minion (0)
	fixture{	
		gru.nuevoMinion(steve)
		gru.nuevoMinion()
	}
	method alimentarMinions(){
		gru.alimentar(steve,500)
	}
	
test "Si se alimentan a los minions, debe tener solo 2 minions reclutados" {
	self.alimentarMinions()
	congelar.reclutarMinions()
	
	assert.equals(steve,congelar.minionsAsignados().first())
}
test "Si se cambia el nivel a 5 deben ser 2 minions,steve y el nuevo minion"{
	self.alimentarMinions()
	congelar.reclutarMinions(0)
	assert.equals(2,congelar.minionsAsignados().size())
}

test "si se alimenta a los minions y se realiza la maldad, la temperatura de la ciudad es 0 "{
	self.alimentarMinions()
	congelar.reclutarMinions()
	congelar.realizarMaldad()
	assert.equals(0,rosario.temperatura())

}test "si se alimenta a los minions y se realiza la maldad, Marco tiene 515 bananas "{
	self.alimentarMinions()
	congelar.reclutarMinions()
	congelar.realizarMaldad()
	assert.equals(515,steve.bananas())

}
test "Si pedimos hacer una maldad sin minions debe salir error"{
	assert.throwsException({congelar.realizarMaldad()})
}
test "si se realiza la maldad con minions alimentados pero el requisito es de 600 debe salir un error"{
		assert.throwsException({
			self.alimentarMinions()
			congelar.reclutarMinions(600)
			congelar.realizarMaldad()
		})
}
test "Si gru hace la maldad, steve y el minion nuevo tiene una maldad"{
	congelar.reclutarMinions(10)
	congelar.realizarMaldad()
	congelar.minionsAsignados().all({x=>x.cantMaldades()==1})
	assert.that(true)

}
test "Si gru hace su maldad sin minions, debe salir un error"{

	assert.throwsException({congelar.realizarMaldad()})
}

}