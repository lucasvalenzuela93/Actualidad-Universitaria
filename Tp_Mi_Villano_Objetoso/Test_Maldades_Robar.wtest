import Class_Villanos.*
import Class_Armas.*
import Class_Minion.*
import Class_Maldades.*
import Class_Ciudad.*
import Class_Robar.*
import Objetos_Robar.*


describe "Test Villanos"{
	
		const rayoEncogedor  = new Arma("rayo para enconger",100)

		
		var rosario 		 = new Ciudad(30,[laLuna])
		var buenosAires		 = new Ciudad(30,[piramides])
		var salta 		     = new Ciudad (30,[sueroMutante])
		var ciudadFuria 	 = new Ciudad (30,[laLuna,piramides,sueroMutante])
		

		var gru 	 		 = new Villano(rosario)
		var guason	 	 	 = new Villano(buenosAires)
		var venom	 		 = new Villano(salta)
		var ajax	 		 = new Villano(ciudadFuria)
		
		
		var robarLuna	 	 = new Robar (gru)
		var robarPiramides 	 = new Robar (guason)
		var robarSuero 		 = new Robar (venom)
		var robarTodo	 	 = new Robar (ajax)
		
		
		var steve 			 = new Minion(0)
		var jon 			 = new Minion(0) 
		
		
	fixture{	
		
				
		venom.nuevoMinion()
		
		guason.nuevoMinion()
		
		ajax.nuevoMinion()
		}
		
		
	method otorgar2Armas(villano){
		villano.nuevoMinion(steve)
		2.times({villano.ejercitoMinions().forEach({x=> villano.otorgarArma(x,rayoEncogedor) })})
	}
	
	method alimentarSteve(villano){
		villano.ejercitoMinions().forEach({x=> villano.alimentar(x,500)})
	}


test "Gru acciona su maldad, robar la luna, por ende steve que tenia 3 armas ahora tiene 4"{
	self.otorgar2Armas(gru)
	robarLuna.realizarMaldad()

	assert.equals(4,steve.armas().size())
}
test "Gru acciona su maldad, robar la luna, por ende la temperatura en Rosario baja"{
	self.otorgar2Armas(gru)
	robarLuna.realizarMaldad()
	
	assert.equals(15,rosario.temperatura())
}
test "Gru acciona su maldad, robar la luna, por ende rosario no tiene luna"{
	self.otorgar2Armas(gru)
	robarLuna.realizarMaldad()
	
	assert.equals([],rosario.objetosQueTiene())
}

test "El Guason hace su maldad,robar las piramides,por ende Buenos Aires se quedo sin la piramide"{
	self.otorgar2Armas(guason)
	robarPiramides.realizarMaldad()
	
	assert.equals([],buenosAires.objetosQueTiene())
}
test "El Guason hace su maldad, entonce steve tiene 1 maldad hecha"{
		self.otorgar2Armas(guason)
		robarPiramides.realizarMaldad()
		assert.equals(1,steve.cantMaldades())
	
}
test "venom hace su maldad, robar Suero, por ende Steve es violeta"{
		self.otorgar2Armas(venom)
		self.alimentarSteve(venom)
		robarSuero.realizarMaldad()
		assert.equals("Violeta",steve.color())
	
}
test "ajax hace su maldad, se roba todo los items"{
		self.otorgar2Armas(ajax)
		self.alimentarSteve(ajax)
		robarTodo.realizarMaldad()
		assert.equals([],ciudadFuria.objetosQueTiene())
	
}
test "El Guason hace su maldad, entonces jon tiene 0 maldad hecha,por ende es inutil"{
		self.otorgar2Armas(guason)
		guason.nuevoMinion(jon)
		robarPiramides.realizarMaldad()
		assert.equals([jon],guason.minionInutiles())
	
}
test "El Guason se condiciono,solo steve puede hacer la maldad, entonces steve es el unico util"{
		guason.nuevoMinion(steve)
		2.times({guason.otorgarArma(steve,rayoEncogedor)})
		robarPiramides.realizarMaldad()
		assert.equals(steve,guason.minionMasUtil())
	
}

test "Ajax ejecuta su maldad sin minions,debe salir error"{
	assert.throwsException({ajax.realizarMaldad()})
}

}
